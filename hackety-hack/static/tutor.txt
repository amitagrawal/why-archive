= Let's Get Going, Shall We? =

This whole dark area is the '''Hackety Hack Tutor'''.  Okay, click '''Continue''' to take the tour!

== The Tutor Controls ==

Before we get jump in, just take a minute to look at the controls in the bar above.

'''Back.''' !icon-tutor-back.png! will go back a page.[[BR]]
'''Stop.''' !icon-tutor-stop.png! saves your spot and closes the tutor.[[BR]]
'''Next.''' !icon-tutor-fwd.png! like the '''Continue''' link, goes to the next page.
'''Skip Around.'''  Click on this to skip to other chapters.

== Coming Back to the Tutor ==

Clicking the !icon-tutor-stop.png! stop button will pause the tutor.  To come back to
it, no problem, just click the lightbulb up at the top of Hackety Hack.  You'll go
back to the lesson where you left off.  '''Give it a try right now.'''

Okay, enough!  Let's hack...

= Lesson One: Asking and Saving =

Let's start with a very simple program.

 * Click the '''Start a new program''' link (down in the main white area of H-ety H.)

== Lesson 1A: Asking ==

In the large white box, type the following code exactly as
written:

{{{
#!ruby
# Asking and saying
name = ask("Your name please?")
puts(name)
}}}

Click '''Run''' when you're finished.

== Lesson 1A: Okay, What Happened? ==

The code you've written is for a language called '''Ruby''', which is the
language spoken inside Hackety Hack.

Now, take a moment to look at the program.  See if you can figure
out how it works.  What do you suppose the `ask` command does?  And
what is that `name` word for?

== Lesson 1A: Let's Hang on to This ==

Now '''Save''' the program.  Call it '''Asking'''.

After that, click on the Hackety Hack logo to return to the main
menu.  (Or go to the toolbar and click on the house icon.)

== Lesson 1A: Your Saved Programs ==

Notice that the program is listed under '''Saved Programs'''.  You
should see the name '''Asking''' and, underneath it, the short
description '''Asking and saying'''.  Well done!

== Lesson 1A: A Note About Saving ==

In the first line of your program, you placed a short comment.
Comments start with the number sign.  That criss-cross
chex mix thing.  Comments are ignored by Ruby.

However, Hackety Hack will check the beginning of your program for a
comment.  If one is found, it will be used as the description.
''Thank you so much Hackety Hack!!''

== Lesson 1A: How Asking Works ==

The `ask` command you used in Part A pops up a window and lets the
person at the computer type something in.  Whatever they end up
typing is handed back to your program.  In Part A, you stored the
typing in the `name` variable.

So how does Ruby know that `ask` is a command and `name` is
a variable?  Because of their position in the "sentences" of your
code.  For example, variables are created with an equals sign.
Since `name` comes before the equals sign, it is a variable.

{{{
#!ruby
name = ask("Your name please?")
}}}

Part of coding is simply just spotting the order of things.

'''EXTRA CREDIT:''' Try changing the question to something a bit meaner.
Make your program all crabby.

== Lesson 1B: Saying ==

Click on the name of your program '''Asking''' to go back to editing
it.  We're going to do something else with that name.

Here's the new program (the first 2 lines are the same):

{{{
#!ruby
# Asking and saying
name = ask("Your name please?")
say("Your name is #{name.length} letters long")
sleep(name.length())
}}}

Type this one in carefully.  You'll notice in the quotes that there
is a little number sign and some curly braces.  The curly braces are
right above your square bracket keys (on a US keyboard.)

== Lesson 1B: All Typed In? ==

Click '''Save''' to save what you've done so far.  Then, '''Run'''.

Watch that barbershop pole spin.  Did you notice the words above it
change?  The `say` command changes the words right above that
barbershop pole!

== Lesson 1B: What's it Good For? ==

The `say` command is nice, because you can tell the person at the
computer what's going on while they're waiting.  You can say
''sending e-mail'' or ''downloading mp3'' or ''just crunching away...''
depending on what your program is doing.  It's a very simple thing,
but hey.. this is only lesson 1!!

== Lesson 1B: A Nap at the Barber Shop ==

Also notice the `sleep` command.  Since the spinning pole goes away
when your program's finished, the `sleep` command lets us pause
the program so you can see it for a few seconds before it goes away.

We'll skip explanation of the other stuff for now, but run the
program a few more times and see if you can tell for yourself:

 * What does `name.length` do?
 * What's that thing surrounding it? `#{....}`

== Lesson 1C: Counting ==

Okay, again: keep the first two lines of the program and go like
this:

{{{
#!ruby
# Asking and saying
name = ask("Your name please?")
1.upto(name.length) do |x|
  say "Your name has #{x} letters."
  sleep 1
end
sleep 10
}}}

Notice the pipe symbols in the program.  At the end of the third
line, you'll see `|x|`.  Those two lines around the `x` are pipe
symbols.  They are like a little waterslide that `x` is shooting
down.  The pipe symbol is right above your Enter key.  Press shift
and that key and you'll see a pipe.

== Lesson 1C: upto ==

Just like `ask` and `say` are commands, so also is `upto` a command.
But why does it have a dot before it?  Why is it attached to the
number 1?

Every command has a front and a back.  The front of a command can
attach to something with a dot.  The back of a command can attach to
something with parentheses.

{{{
#!ruby
1.upto(6) do |x|
 say("Holding up #{x} fingers")
 sleep 1
end
}}}

The `upto` command is a part of every number.  In this case, it is a
part of the number 1.  Think of it as a vicious dog that has a leash
to its owner.  The dot is the leash.

== Lesson 1C: Upto the Dog ==

{{{
#!ruby
1.upto(6) do |x|
}}}

Back to the dog analogy!  So, the parentheses are the dog's mouth, eating the number six.  The
thing to remember is: commands are owned by whatever is on the
left-side of the dot.  And its gobbling up everything in the
parentheses.  This gives the command energy to do its job!!  You
know: Scooby Snacks.

{{{
#!ruby
"Hello?".upto(6)
}}}

See, that won't work.  Because quoted things don't own a dog called
`upto`.  Because `upto` is for counting!!

We're counting from 1 ''up to'' 6.  Nice and easy to read.

= Lesson One Complete! =

At this point, you probably have a lot of questions and you may feel
that there's a lot of unexplained stuff in there.  Well, of course
there is!!  You can't just know everything right away.  But you have
learned some things:

 * '''Commands''' do things, just like ''dogs'' do things.
 * '''Variables''' ''store'' things.
 * You create a variable with '''an equals sign'''.  That's how Ruby
   knows -- by that equals sign!
 * Commands are owned by the thing on the left-side of the dot.
 * Commands eat useful things in '''parentheses''', as if they were
   biscuits.
 * The commands `ask`, `say`, `sleep` and `upto` were explored
   a bit.

That's pretty good, actually.  Take a rest, enjoy your accolades and
let your brain soak in what you've got so far.

'''EXTRA CREDIT:'''  If you want to try stretching your brain a bit
further, try writing a program which blinks.  You can use the `say`
and `sleep` commands to do it!!

= Lesson Two: Getting Outdoors =

In Lesson One, we asked some things and we said somethings.  Not bad,
not bad.  But not incredibly useful, you know?  How about let's make
the computer do something?

Specifically: let's get outdoors and start writing code that can
connect to the Web.

== Lesson 2A: Downloading ==

Start a new program.  (Click on the paper icon in the toolbar.  It's
the second one from the left.)

{{{
#!ruby
# A simple file downloader.
url = ask("Enter a Web address:")
save_as = ask("Save the file as:")
Web.download(url, save_as)
}}}

Save the program as '''Downloader'''.

== Lesson 2A: Running the Program ==

This program asks twice.  In the first "ask" box, type in an address
to some file on the Web.  How about the Dead Hensons' rendition of
the "Pinball Number Count"?

{{{
  http://www.deadhensons.com/media/pinball_clip.mp3
}}}

Then, in the second box, type in a name for the downloaded file.
Like:

{{{
  pinball.mp3
}}}

What did the program do?  Can you tell just by looking at the code?

== Lesson 2A: Where Did the File Go? ==

So, you saw the file downloading, right?  Now to find where it
downloaded.  Hackety Hack keeps your downloaded files in a folder,
right next to where your programs are saved.  Let's go dig it up!

{{{
 %HACKETY_USER%
}}}

Go to the folder above in Windows Explorer.  You can copy-and-paste it straight into
the Explorer bar.  Or start at "My Computer" and click down through
each folder.

== Lesson 2A: Your Hacks Folder ==

You should see a group of files ending in .rb, as well as a folder
marked '''Downloads'''.  Aha!  Each of the .rb files is one of your
programs.  These are genuine Ruby programs you can pass around to
other Hackety Hackers.  If a friend gives you a script, you can copy
it into this folder and it will appear in Hackety Hack!

Now, check the '''Downloads''' folder.  Well, well, well.  Fancy that.

== Lesson 2A: The Web Library ==

To download the MP3, we use the `Web.download` command.  This is
just another command like `ask` and `say`, except that it is a part
of Hackety Hack's Web library of commands.  (In Ruby, these commands
are also called '''methods'''.  Just so you know.)

To keep things organized, some commands are kept in libraries.  Stuff
like `Web.fetch`, `Web.page` and `Web.download` all happen to relate to
working with the Internet, so they are kept in the '''Web''' library.

== Lesson 2A: As For Your Private Library ==

In upcoming lessons, you'll learn how to add your own libraries and
how to use libraries from other hackers.  This opens Hackety Hack up
to new commands that don't come with it.

'''EXTRA CREDIT:''' Hackety Hack comes with a command `ask_save_file()`
which is a special kind of `ask`.  See if you can change the third
line of your program to use this command.

== Lesson 2B: Fetching (Not Saving!) ==

While we're in the Web library, let's play with `Web.fetch`.  I mean
you basically know everything there is to know about `Web.download`.
It downloads files from the Internet and saves them.  '''THE END.'''

But `Web.fetch` is a bit smarter.  It grabs things off the Internet
and, rather than saving, lets you play with the thing a bit.

== Lesson 2B: MeFi ==

Here's the next example.  Save this one as '''MeFi'''.

{{{
#!ruby
# Read the Metafilter feed.
puts Web.fetch("http://xml.metafilter.com/rss.xml")
}}}

Run the script.  You'll see Hackety Hack download a file... but
something else happens... hmmm!

== Lesson 2B: A Blog, You Know? ==

Metafilter is a blog.  So this example could work with any blog you
like.  The Web address we're using here is Metafilter's news feed.
(Often sites will call this RSS or XML.  Often, blogs will have a
link in a sidebar or something.)

Here are a few other feeds:

 * http://digg.com/rss/index.xml
 * http://feeds.engadget.com/weblogsinc/engadget
 * http://feeds.feedburner.com/boingboing/iBag

== Lesson 2B: Playing With Fetch ==

Okay, so we've got Metafilter's feed with all the latest news posted
on the blog.  So, then what?  What good is this?  Can't you just go
STRAIGHT TO METAFILTER.COM IN A REGULAR BROWSER??

Let's add a few lines to our program:
{{{
#!ruby
# Read the Metafilter feed.
feed = Web.fetch("http://xml.metafilter.com/rss.xml")
feed.items().reject!() do |item|
  item.description().length() > 200
end
puts(feed)
}}}

== Lesson 2B: Ahh! Complicated! ==

Okay, let's step through this program.  It's quite a bit more
complicated, isn't it?  But it's only five lines, so I think we can
figure it out.

The Metafilter news gets saved in a variable called `feed`.  So we
can play with it.  In line 3, the `reject!` command is used.  This
command deletes things from a list.  And the news feed contains a
list of news `item`s.  Hmmm.  How does this all fit together?

== Lesson 2B: Hidden in the Feed ==

Try this:

{{{
#!ruby
# Read the Metafilter feed.
feed = Web.fetch("http://xml.metafilter.com/rss.xml")
puts feed.items()
}}}

When you run this, the `items` will be listed as "An Array" which is
"a list of things".

== Lesson 2B: Quickly, About Arrays ==

You can create arrays (aka "lists") with square brackets.

Try this little program.  (You can hit Ctrl-Z to undo your changes
one-by-one and Ctrl-Y to redo those changes again.)

{{{
#!ruby
puts(["HELLO", 1, 2, 3])
}}}

As you can see, you put square brackets on each end.  And commas
between each item.  Like a caterpillar stapled to the screen.  The
square brackets are the staples and the commas are the caterpillar's
legs.

=== Lesson 2B: Back to Reject! ===

Now that we know that a blog feed is just an ordinary list of
things, we can start treating it like one.  The `reject!` method
will delete stuff from the list that we don't want.  It has an
exclamation point BECAUSE IT'S DANGEROUS!!  Kablewy.  It deletes
that stuff for good.

{{{
#!ruby
# Read the Metafilter feed.
feed = Web.fetch("http://xml.metafilter.com/rss.xml")
feed.items().reject!() do |item|
  item.description().length() > 200
end
puts(feed)
}}}

This program will remove any thing from the list which is longer
than 200 letters.  We just want to focus on the short little
Metafilter posts that show up sometimes.  We're not in the mood for
anything too long.

== Lesson 2B: We Read a Feed in a Very Special Way ==

AH!  So this is pretty handy, huh?  If you like blogs, this is just
the start.  You could write programs to watch your favorite blogs
for certain words.  You could write a program to only show items
containing MP3s.  And we'll get into some other fancy things soon
enough.

== Lesson 2B: About the Do and End ==

We're going to skip getting too detailed on the `do`...`end` part,
except to say: it checks to find blog entries longer than 200
letters.  But we saw this in the last lesson, when we counted `upto`:

{{{
#!ruby
  1.upto(6) do |x|
   say("Holding up #{x} fingers")
   sleep(1)
  end
}}}

This `do`...`end` section is called a "block".  It's usually
slightly indented, but that's not necessary at all.  Indenting the
block makes it stand out a bit more, to help us see it.

= Lesson Two Meets a Timely End =

Well, that was thrilling!  You moved right off into doing some
useful things.  We started to grab stuff off the Web: downloading
files and fetching blogs.

Here's a few programming bits you've picked up:

 * The '''Web library''' contains commands for horsing around with
   the Internet.
 * '''Web.download''' saves files off the web.
 * They get stored in '''your Hackety Hack folder'''.
 * Your programs are saved in that folder, too!
 * '''Web.fetch''' can grab blog feeds and web pages.
 * You can dissect a feed and change it or get stuff out of it.
 * Web feeds are just '''a list of items'''.
 * A list is also called '''an Array'''.

Very, very good.  I do say.  Take a break, eat a gigantic Dagwood
sandwich, and please return when you are duly refreshed.

= Lesson Three: Making a Blog =

So, you're still trying to get comfortable with Ruby, but we've seen a
lot more of what Hackety Hack can do.  Downloading and eating blogs,
not bad.

But this lesson's going to hopscotch all that other stuff.  In this
lesson, you'll learn to make your own blog in just a few lines!!
And we'll start to figure out what all the little pieces are:
strings, numbers, blocks.  Stuff like that.

== Lesson 3A: Web.popup ==

Start up another new program.  Save this one as '''Popup''':

{{{
#!ruby
# A simple popup
Web.popup() do
  title("My Page")
  para("This belongs to ____")
end
}}}

You can put your name in where the blanks are.  '''Save'''
it.  '''Run''' it.  To close it, click on the "X".

We're using a few things we've seen before, but let's go over each
of them, to be clear.

== Lesson 3A: Modules and Methods ==

We've talked about modules.  What's the module in the code you just typed?
(''Hint: only one is used.'')

And we've talked about commands (also called '''methods'''.)  What are
the methods in the code?

== Lesson 3A: Let's See If You Were Right ==

The module is the `Web` module.  It contains a method called
`popup` that we want to use.  There are three methods in all:
`Web.popup`, `title` and `para`.

The `para` method means "paragraph" here.

== Lesson 3A: Blocks ==

Attached to `Web.popup` is a block.

{{{
#!ruby
Web.popup() do
  ...
end
}}}

The block is everything between `do` and `end`.  A block is a group
of code attached to a command.  Again: a GROUP OF CODE attached to a
method.

A block is like '''a new lung'''.  You plug it in to make a method
breathe.  The `Web.popup` method gives its block one puff of air.
And the block uses that puff of air to make all the parts that go
inside the popup.  One popup, made in one puff of air.

== Lesson 3A: Blocks (cont'd.) ==

We used a block a few other times.  Here's one:

{{{
#!ruby
1.upto(6) do |x|
 say("Holding up #{x} fingers")
 sleep(1)
end
}}}

In this one, the block gets '''six puffs of air'''.  Every time we count a
new number, the block gets a puff.  And it uses that puff to say
something and take a short nap.

Puff.  Puff.  Puff.  Puff.  Puff.  Puff!  And after that sixth one,
that block's life is over and done.

== Lesson 3A: So, Is It Totally Disassembled? ==

Okay, so we've almost finished taking this apart:

{{{
#!ruby
# A simple popup
Web.popup do
  title("My Page")
  para("This belongs to ____")
end
}}}

First, we have the `Web.popup` method from the `Web` module, which
is attached to a block, an iron lung that gets turned on and handed
a puff of air.  In the block, the `title` and `para` commands run.

== Lesson 3A: Words in Strings ==

Let's talk about the quoted phrases.

{{{
#!ruby
"My Page"
}}}

This is a string.  It's a short string of letters.  When you think
"string", just imagine each letter is '''clipped to a clothesline'''.
The little quotes are the clips on each end, hooked on to the
clothesline.

== Lesson 3A: Upsy Reversy ==

Strings are great for messing with words.  Try changing the third
line to:

{{{
#!ruby
title("My Page".upcase().reverse())
}}}

And run it.  And think about that.

What is `title`?  And what are `upcase` and `reverse`??

== Lesson 3B: A Blog Popup ==

Let's change the insides of the popup a bit.  Instead, we want to
add a new blog entry.

{{{
#!ruby
# Write in my blog
Web.popup() do
  title("Add a blog entry")
  editline("Title")
  editbox()
  buttons("cancel", "save")
end
}}}

'''Save''' the program as '''WriteMyBlog'''.  '''Run.'''  Hey, neat!
Try typing in a short blog entry and saving.

== Lesson 3B: Well, Not Really ==

Hmm.  Actually.  That didn't save anywhere.  It's gone!!  You lost
your precious blog entry!!  That is unacceptable.

Let's change the second line to:

{{{
#!ruby
Web.popup('MyBlog') do
}}}

That tells Hackety Hack to attach the popup to the '''MyBlog''' table.
Try running it again and typing in a blog entry.  How'd that go??

While you're at it, save a few more blog entries.  Get it going.

== Lesson 3B: About Tables ==

Tables are empty boxes in Hackety Hack where you can store things.
Each box will contain the same kinds of things.  So in the '''MyBlog'''
box, we'll be storing blog entries.

What's a blog entry?  Well, in the popup we have an `editline` for the
title and an `editbox` for typing the main blog paragraphs.  So, based
on the popup we made, a blog entry is a title and a bunch of
paragraphs.

== Lesson 3B: What are Tables? ==

Tables are a great place to stuff links or journal entries or
pictures or... anything really.  And links could go in a '''MyLinks'''
table and journals in a '''ClaspedDiary''' table...  You know?

Your tables are all kept in your Hacks folder, right next to your
programs.  There's a file called `+TABLES`.  That file!

== Lesson 3C: Reading the Blog ==

Go start another new program.

{{{
#!ruby
# Read my blog
blog = Table('MyBlog').recent(10)
puts blog
}}}

Save this one as '''ReadMyBlog'''.  And run it, of course!!

The `Table('MyBlog')` command opens up the the blog table you've been adding
to.  And the `recent` method grabs a certain number of the latest
blog entries.  In this case: '''the most recent ten entries.'''

== Lesson 3C: And Another Hack ==

Oh, also worth trying:

{{{
#!ruby
# Read my blog
blog = Table('MyBlog').recent(10)
Web.popup do
  puts blog
end
}}}

What else can you do with tables?  Well, we'll get into that.

= Lesson Three is In The Bag =

Wonderful, you've made a very simple blog.  We'll add some color
to it later.  But look at all you learned:

 * You used `Web.popup` to make a little web page in a box.
 * '''Strings''' are letters inside quotes.  (Clipped to a clothesline.)
 * Popups can be attached to tables, for saving.
 * '''Tables''' store things, in order.  Your blog entries were
   each saved in the '''MyBlog''' table.
 * Tables have a `recent` method for getting the latest stuff
   added to the table.

For now, have a rest.  The next lesson will be short, but you
deserve a break after making your own super special blog.

'''EXTRA CREDIT:''' Tables also have an `all` method that gives
you back everything inside the table.  Change your blog to show
everything rather than just the most recent.

= Lesson Four: Cheating =

You've done some useful things.  Downloaded files, built a simple
blog.  And lots more ahead.  But let's stop and figure out how to
speed up your learning.

== Lesson 4A: I Recommend That You Cheat Immediately ==

On the top toolbar of Hackety Hack, you'll see a series of little
icons: a little house, a lightbulb.  Click on '''the magic wand''' icon.
This icon brings up the Cheat Sheet.

You don't need to read the whole thing just yet.  We're just going
to glance over a few parts of it to get you comfortable with reading
the Cheat Sheet.  You can keep this out while you're writing
programs in the main window.

== Lesson 4A: Numbers ==

Let's read the second box on the Cheat Sheet, which talks about
Numbers.  ''Any Series of Digits.''

Each box on the Cheat Sheet is carefully put together.  On the left
side, the title of the topic with an easy description.  A Number.
What is a Number?  It's any series of digits!  And, on the right
side is a few short examples with the numbers highlighted in a
color.

== Lesson 4A: Looking at the Numbers Examples ==

The two examples here illustrate two uses of numbers: first,
multiplying a number.  And, second, using a number with a method and
a block.

In the main window, start a new program.  Let's get multiplication
working.  Type in the first line of the program:

{{{
#!ruby
days = years * 365
}}}

'''Run''' it.  Did it work?  (It did not.)

== Lesson 4A: Days and Years ==

So, how can we fix this program?  Try setting the `years` variable
right before running that code.

And also add at the end: `puts days`

Any luck?

== Lesson 4A: On to the Times ==

Move to the second example on the cheat sheet.  Replace the `days`
and `years` program with this:

{{{
#!ruby
5.times { puts "Odelay!" }
}}}

And that's it.  These two examples are the key to using numbers.
Numbers are for math.  Or numbers are for repeating something.

== Lesson 4A: Arrays ==

Move down to the fifth box on the cheat sheet.  '''Arrays.'''  ''A List
of Things.''  We've seen Arrays before, too.   So much is familiar to
you already.

The Cheat Sheet gives another two examples to jog your memory about
how Arrays work.  The first example makes an Array of book titles.

{{{
#!ruby
books = ["Don Quixote", "Bluebeard"]
}}}

Type this in as a new program.  Remember to `puts` the variable
you're storing the Array in!

== Lesson 4A: Briefly, More Arrays ==

The second example in the Array cheat sheet has a bunch of variables
named `one`, `two` and so on.  The example makes an Array and then
runs the `each` method with a block.

'''For EXTRA CREDIT:''' get that `each` method and its block hooked on to
the `books` array in your new program!

== Lesson 4A: Using Help ==

Keep the cheat sheet open to the '''Array''' section.  Now go back to the
main window and click the '''purple books icon''' (right next to the
magic wand.)

This is the help manual!  Click on '''Ruby''' on the left-hand side.
A little submenu opened up.  Now, click on '''Array'''.

Every help page has a big, helpful summary at the top!
'''An Array is a list of things. Especially useful when you have some
things you want to keep in a specific order.'''

== Lesson 4A: Scroll Down ==

The cheat sheet section on Arrays is just a small box.  Not too
much stuff there, just enough to get you thinking.

But in the help page on Arrays, you can scroll down for several
pages, explaining the different methods available on an Array.

So: if you need to just remember some basic things, check the Cheat
Sheet.  If you need a lot more, hit the help pages.

== Lesson 4B: Sample Programs ==

Close the help pages and return to the cheat sheet window.  Scroll
down, looking over each of the boxes.  There are about ten boxes
there -- blocks, methods, assorted things.  This is so handy!  It's
all the basics of Ruby wrapped up in one page.

After those examples are a handful of sample programs.  In fact,
these are programs you wrote in the last few lessons.  You can
safely delete any programs you don't want any more, because they are
here on the Cheat Sheet in case you need them again.

== Lesson 4B: Deleting Programs and Tables ==

We're finished with the cheat sheet, you can put it away.  Go to the
main Hackety Hack window by hitting the house icon.

Each Saved Program and Saved Table has its own little icon.  Place
your mouse over one of those icons.  A menu appears!

In each menu is a '''Delete this''' link.  Use this link to scrap
any of your programs or tables.  Once deleted,
they will be gone forever, but that's the whole idea, right?

== Lesson 4B: Emptying the Blog ==

If you'd like to empty out your blog entries, go ahead and delete
the '''MyBlog''' table by clicking its delete link.

'''EXTRA CREDIT:''' try changing the name of your blog table in the
program from last lesson.  Add a few entries and come back to the
home page.  Did it show up?

= Adieu to a Short-Lived Lesson Four =

That was a quick, little lesson, yeh?

 * You saw the '''cheat sheet''', which is nice if you forget
   how to make an Array or a String and need to refresh.
 * The '''help pages''' are much, much deeper, with long
   pages on absolutely anything you need help with.
 * Every saved program and table has its own menu.
 * In this menu, you've got a '''Delete this''' link.

Ready to push off again??

= Lesson Five: Why's YouTube Lib =

While you've been writing your blog and fetching web pages and
stuff, I've been off in Greenland working on my own library that lets
me keep copies of my favorite YouTube videos.  It's turning out so
good that I totally want you to try it out!!

In this lesson, I'm going to share my program with you and it's up
to you to put it to good use.  This is going to be a
super-challenging lesson, but you'll grow a lot as a hacker, so it's
very much worth it, don't you think??

== Lesson 5A: Getting Why's Program ==

Start up a new program.  Here's how you'll start it out:
{{{
#!ruby
# Playing with Why's YouTube program.
Hacker('why').load_program('youtube.rb')
youtube_vid = ask("Enter the link to a YouTube video:")
save_as = ask("Your name for this video:")
YouTube.download(youtube_vid, save_as + ".flv")
}}}

Save this program as '''YouTuber'''.  We'll continue to improve this over
the course of the lesson.

== Lesson 5A: Adventure Time ==

Go ahead and run this script.

It asks you for a YouTube link.  Let's download a cartoon, huh?

{{{
  http://youtube.com/watch?v=LNVYWJOEy9A
}}}

When it asks you for a name, type in '''Adventure Time''' and click OK.
Then, while it's downloading, click '''Continue'''.

== Lesson 5A: Way To Leech, Kid ==

So, did it start downloading the video??  Let it go, it may take
awhile.

In the first line, you load a program from my batch of shared
programs.  The phrase `Hacker('why')` creates a Hacker object.
You'll be able to use this object to send messages to other hackers
and to share programs between yourselves.  For instance, the Hacker
object has a method called `load_program` which is used to fetch my
YouTube program.

== Lesson 5A: And, Actually, There Were Two Downloads ==

Did you notice how Hackety Hack downloaded my program before it ran
the rest of your program?   Where did my program come from?  How did
Hackety Hack know where to find youtube.rb??

{{{
#!ruby
http://why.hacketyhack.net/program/youtube.rb
}}}

Every Hackety Hack user, if they like, gets their own spot to share
programs at HacketyHack.net.  Mine is at [[http://why.hacketyhack.net http://why.hacketyhack.net]]
(opens a new browser.)

So, as you see, programs are simply shared over the web.  This is
neat because you can go ahead and read the code to my program right
on hacketyhack.net before you download it.

== Lesson 5A: Back to Adventure Time ==

So, the video will finish downloading.  But what can you do with it?
We saved it as '''Adventure Time.flv''' but what is a .flv file?

Here's one way to watch the video:

{{{
#!ruby
puts Video("Downloads/Adventure Time.flv")
}}}

You can put that in a new, blank program and run it.

'''EXTRA CREDIT:''' For extra credit, see if you can get the Video to
appear in a popup.

== Lesson 5B: Sure, Videos, But Now What?? ==

Okay, so we're kind of at the point we were with your blog.  Your
blog had one program for adding blog entries.  And another program
for reading your blog.  That was fun and all, but wouldn't it be
nice to have just one program called '''YouTuber''' that was for
downloading and watching and sorting your videos??

== Lesson 5B: Listing Your Videos ==

Let's start with a simple popup.  You can just make this the new
'''YouTuber''' program.

{{{
# Keep a catalog of YouTube videos.
vid = Web.popup() {
  title("My Downloaded Videos")
  bullets() do
    Dir["Downloads/*.flv"].each() do |file|
      link_to(file)
    end
    link_to("Download a New Video")
  end
}
puts "Want to watch #{vid}?"
}}}

Okay, so a lot of familiar things here.  You know about `Web.popup`
and its `title`.  But a bunch of new things `bullets` and `link_to`
and `Dir`.

== Lesson 5B: Getting the Hang of Bullets and Links ==

'''Run''' this program a few times and get the hang of it.  Obviously,
we're not finished.  But, ask yourself, what happens when you click
on a link?  Read over the program and see if you can figure out how
it works yourself.

Okay, good.  Let's talk about the three new parts of this program:

'''1.''' `bullets` is a method which creates a bulleted list.  Whenever
you make a new link or paragraph or title inside the list,
it becomes a new bullet.

'''2.''' `link_to` simply adds a link.  When you click the link, the
popup closes and the name of the link is saved in `vid`.  Do
you see where `vid` gets set?

== Lesson 5B: Dir[] ==

'''3.''' `Dir[]` is a special command for searching folders.  We want to
find all .flv files in the Downloads directory.  So we use:

{{{
#!ruby
Dir["Downloads/*.flv"]
}}}

If we wanted to list all files in the Downloads directory, not
just .flv files, then we'd use:

{{{
#!ruby
Dir["Downloads/*"]
}}}

The asterisk is a wildcard character.  It matches any set of
words, such as '''Adventure Time'''  in the name "Adventure
Time.flv".

== Lesson 5B: Okay, Main Popup is Done ==

This popup is going to be our main menu for our program.  We'll be
able to watch videos or download new videos from here.  And the
`vid` variable will tell us what's next.

'''EXTRA CREDIT:''' try adding a `title` in the bullets.  Or try changing
the bullets to numbers with the `list` method.

== Lesson 5B: main_menu() ==

Okay, so let's wrap up the main menu in its own new command.

{{{
#!ruby
# Keep a catalog of YouTube videos
def main_menu()
  # ... MOVE JUST THE POPUP INTO HERE ...
end

vid = main_menu()
}}}

And when I say ''MOVE JUST THE POPUP INTO HERE'', I'm serious.  Put
the `Web.popup` code right in there where that line is.

'''Run''' it, make sure it still works and we'll move along.

== Lesson 5C: The Other Two Popups ==

Since this is a really tough lesson and you're doing such a sensational
job, I'm going to just cheat and give you the other two popups.
You can stick these right under the main_menu() popup.

{{{
#!ruby
def download_video_popup()
  Web.popup() {
    title("Download a Video")
    p("(Works with YouTube, Google Video, Revver, etc.)")
    editline("URL")
    editline("Video Name")
    buttons("cancel", "ok")
  }
end

def show_video_popup(video_title)
  Web.popup {
    title video_title
    puts Video(video_title)
  }
end
}}}

'''EXTRA CREDIT:''' Before I show you anything else, see if you can get
these two popups to appear by calling them instead of main_menu()
on the last line of the program.

== Lesson 5C: Sleuth it Out Yourself ==

Look over these two new popups.  What do they do??

The first popup looks a lot like the window you created for your
blog!  But it's not attached to the '''MyBlog''' Table.  Or any Table, for
that matter.

The second popup plays videos!  Too easy!

== Lesson 5C: Bringing it All Together ==

Here's the final piece of the puzzle.  Put this under the three
popup commands.  You should have the three commands and then this.

{{{
#!ruby
vid = main_menu()
if vid.equal?("Download a New Video")
  new_vid = download_video_popup()
  Hacker('why').load_program('youtube.rb')
  YouTube.download(new_vid["URL"], new_vid["Video Name"] + ".flv")
else
  show_video_popup(vid)
end
}}}

== Lesson 5C: Whew, Now THAT is a Hack ==

This is becoming a serious program.  Much more intense than your
other programs.  I would spend some time looking over everything to
get a handle on what's going on.

In this code, we're using an `if`.  The `if` will check to see what
was picked from the main_menu.  `if` we picked "Download a New
Video", the program will go ahead and use Why's YouTube module to
download a new video.

Otherwise, we go to `else`, which tells Hackety Hack what to do if
we picked one of the other links.  Since the other links are all
video file names, we can send that video name straight the the
`show_video_popup()`.

== Lesson 5C: Put This Hack in Motion ==

Try to '''Run''' it.  Download a few more YouTube videos, watch a few
more, take a break, etc.  You'll get the hang of it if you run it a
few times and read through it over and over.

'''EXTRA CREDIT:''' Okay, now that you've been exposed to making popups
into commands, I'm going to really challenge you!!  Take your blog
and turn it into a single program.  With a popup for reading your
blog and an "Add a New Entry" link at the top!!

== Lesson 5C: The Complete YouTuber ==

Here's the complete code for the YouTube popup, if you got tripped
up in any way at all:

{{{
#!ruby
# Keep a catalog of YouTube videos.
def main_menu()
  Web.popup() {
    title("My Downloaded Videos")
    bullets() do
      Dir["Downloads/*.flv"].each() do |file|
        link_to(file)
      end
      link_to("Download a New Video")
    end
  }
end

def download_video_popup()
  Web.popup() {
    title("Download a Video")
    p("(Works with YouTube, Google Video, Revver, etc.)")
    editline("URL")
    editline("Video Name")
    buttons("cancel", "ok")
  }
end

def show_video_popup(video_title)
  Web.popup {
    title video_title
    puts Video(video_title)
  }
end

video_title = main_menu()
if video_title == "Download a New Video"
  new_vid = download_video_popup()
  Hacker('why').load_program('youtube.rb')
  YouTube.download(new_vid["URL"], new_vid["Video Name"] + ".flv")
else
  show_video_popup(video_title)
end
}}}

= Blam-m-k-k-k! You Won the Lesson Five Badge! =

That was a crazy lesson.  It's probably kind of a blur!  Don't worry
if you didn't quite grasp it all.  Part of this lesson was just to
get you comfortable hacking together a lot more code than you're
used to.

Just make sure you comprehend these:

 * Programs can be shared on hacketyhack.net.
 * Like this: `Hacker('why').load_program('youtube.rb')`
 * The `Video()` method can be used watch videos.
 * Popups can have `bullets` and `link_to`.
 * The `Dir[]` method lists files in a folder.
 * Popups can be turned into commands with `def`.

Very good!  At this point, you know all you really need to
start hacking some fun stuff on your own, but we'll keep going.
Just to prove the point.

= Lesson Six: Walkie-Talkies ==

Hackety Hack has built-in walkie-talkies!  You know how
walkie-talkies let you talk on certain channels?  Or how radios
need to be tuned to a specific frequency?  Well, you can name the
frequency you want to chat on.  Here, I'll show you...

== Lesson 6A: Setting Your Handle ==

First, go to the home page and click on '''Your Setup'''.  It's right
on that first page under Hacky Mouse.  On that page, type in your
Hackety Hack name and password.  (If you don't have a name and password,
visit [[http://signup.hacketyhack.net the signup page]].)

Save your setup.  Now, start a new program called '''WalkieTalkie'''.

{{{
#!ruby
# Test out my chat channel
chan = Hacker('yourname').channel("test")
puts chan.start
}}}

Where it says `yourname`, put in your Hackety Hack username.  You're
going to start your own channel named `"test"`.

== Lesson 6A: Mic Check ==

Okay, give it a '''Run'''. You should see the message:

{{{(Channel yourname's test)}}}

A channel is a place where you can send chat messages.  You're going
to love this.  It's so easy!

== Lesson 6A: Testing, Testing, Loud and Clear ==

Okay, let's send a few chat messages:

{{{
#!ruby
# Test out my chat channel
chan = Hacker('yourname').channel('test')
chan.say("Anyone home???")
chan.say("HALLOOOOOO???!")
}}}

The `say` method sends chat messages to the channel.  And, even
though it's your channel, anyone can come and chat on that channel,
if you give them the name of the channel.

== Lesson 6A: Oh, Oh, What Did You Say?? ==

Let's read the messages:

{{{
#!ruby
# Test out my chat channel
chan = Hacker('yourname').channel('test')
chan.say("Hmm, that truck just exploded.")
puts chan.hear()
}}}

The `hear` method gets back a list of messages from the channel.
You should see all of the messages you've just sent.  Messages will
disappear from the channel after ten minutes, so keep chatting or
the channel will go dead!

== Lesson 6A: You Can't Be Alone Right Now ==

Now, go get a buddy to start Hackety Hack on their machine.  (They
can be across the Internet even.)  And try playing with the last
program, sending messages and reading messages.

Remember, though, that your buddy will need to use '''your''' channel.
So, if your name is `klapaucius`, your buddy will do this:

{{{
#!ruby
Hacker('klapaucius').channel('test')
}}}

Both of you need to be talking on the channel you created.  Got it?

== Lesson 6A: Chatty Overachiever?? ==

'''EXTRA CREDIT:''' Try sending a Picture object from the Internet.
Pictures are created like this:

{{{
#!ruby
Picture("http://hacketyhack.net/hackety.png")
}}}

For more extra credit, try sending each other some Arrays and
Symbols.

== Lesson 6B: Making It Slick ==

So, `say` and `hear` are pretty cool.  But it's kind of annoying to
have to keep running the program over and over just to keep
chatting, isn't it?  Let's write an actual chat popup, you know?

== Lesson 6B: The Scrollbox ==

Let's make a popup that reads the channel:

{{{
#!ruby
# Test out my chat channel
chan = Hacker('yourname').channel('test')
Web.popup() do
  title('Chat Box')
  box = scrollbox()
  editline('Say')
end
}}}

Okay, '''Save''' it.  '''Run''' it.  How's that look?  It doesn't do any actual
chatting yet, so let's start reading the chat messages...

== Lesson 6B: Every Two Seconds ==

Right after the `editline('Say')`, but before the `end`, add this:

{{{
#!ruby
every(2) do
  chan.hear().each() do |message|
    update('scrollbox', message)
  end
end
}}}

This is a neat little bit of code!  The `every` method will run
over-and-over in the background.  This means that your popup can
show up and the `every` method can do its business without stopping
your program.  The `2` means '''every 2 seconds'''.

== Lesson 6B: Hack's Got a Heartbeat ==

So what are we doing every 2 seconds?  We're listening to the channel,
grabbing any new messages and adding them to the scrollbox.

Run this program.  And have your buddy send you some messages while
it's running.  Do you see how it checks every two seconds?

== Lesson 6B: The Whole Walkie-Talkie ==

Now let's get the `Say` box working so you can chat back.  Here's the
full program:

{{{
#!ruby
# Test out my chat channel
chan = Hacker('yourname').channel('test')
Web.popup() do
  title('Chat Box')
  box = scrollbox()
  editline('Say')
  buttons('send') do |popup|
    chan.say(popup['Say'])
  end
  every(1) do
    chan.hear().each() do |message|
      update('scrollbox', message)
    end
  end
end
}}}

The last part hooks up the `Send` button.  If you attach a block
to a button, that block will be called when you press the button.

== Lesson 6B: But Have You Really Said All You Can Possibly Say? ==

Okay, you're chatting!  We're going to do some fun things with your
chat channel, but for now just play around with it

'''EXTRA CREDIT #1:''' Strings have a `reverse` method, remember?  So
"HacketyHack".reverse() gives you "kcaHytekcaH".  Change the chat
program so that everything you say gets turned backward!

'''EXTRA CREDIT #2:''' Try sending a blog entry to the channel.  Do
you remember how to read the MetaFilter blog?  Send: `blog.items[0]`
to your hacker buddy and see what happens.

Oh, and if you don't have a buddy, you can see if I'm around in
my channel:

{{{
#!ruby
chan = Hacker('why').channel('lobby')
}}}

= Good Times, Lesson Six, See Ya Later =

A very productive lesson.  You picked up:

 * Connecting to '''a chat channel'''.
 * Send messages with `say`.
 * And, listening for messages with `hear`.
 * Using `every` to run a block in the background every two seconds.
 * Adding messages to a `scrollbox`.
 * And, finally, you hooked a block up to the `Send` button.

This next lesson is the last lesson.  I'm still working on three more
lessons which will be included in a future version of Hackety Hack.  In
the meantime, please spread the word so I can get support to keep doing
this!!

= Lesson Seven: Sharing Your Stuff =

In the last two lessons, you built two new programs from nothing: a
YouTube video watcher and a chat program.  And, if you've been doing
the extra credit, your programs are just a bit more than that even.
So, you're doing fantastic!

But hacking isn't all about starting from scratch.  Most of the fun
you can have is from building on top of old programs.  Or enhancing
programs by the other hackers out there.

== Lesson 7A: Back to Chat ==

Let's talk about sharing your programs.  Because a good way to get
help on your programs is to share them on your Hackety Hack site.

So, go back to the home page and find your chat program
from the last lesson.  (If you got rid of it, go ahead and use any
other program.)  Place your mouse over the icon to the left of the
chat program's name.

A menu should appear.  Select '''Share this''' from the menu.  Your
program will be uploaded to the Hackety Hack site at this point.

== Lesson 7A: Off in Your Corner of Hackety Hack Dot Net ==

To be sure your program is shared, visit
[[http://%USERNAME%.hacketyhack.net your personal HH page]].

You should see your program listed there on your page.  Click on the
program's name.  The browser will pop up a window asking if you'd
like to open up the file: click '''OK'''.  In a few seconds, Hackety
Hack will appear and ask if you want to import the program.  Go
ahead and click '''OK'''.  You should then get a message about already
having that program.  So true.

== Lesson 7A: The Essence of H-ety H ==

Okay, good.  So, this is the essence of sharing.  You shared a
program on your site.  Now other hackers can click on the program
and import it into Hackety Hack.  The program will appear right in
their list.

== Lesson 7A: And Back to My YouTube Program ==

This is ''exactly'' how I shared my YouTube program.  You'll see it
in my list [[http://why.hacketyhack.net/ here]].

Except you didn't actually get a copy of the program.  You used this
bit of code:

{{{
#!ruby
Hacker('why').load_program('youtube.rb')
}}}

== Lesson 7A: In Short, You Have Choices ==

So, you can get programs in two ways:

 * Click on the program listed on the Hackety Hack site.
   (Which saves the file in your Saved Programs.)
 * Use `Hacker.load_program`.
   (Which will download the file fresh every time you need it.)

Let's try it with the program you just shared.  Let's say it's
called `Chat.rb`.

== Lesson 7A: Loading Your Program ==

Start a new program.  Type in a `Hacker.load_program` line to go out
and get your `Chat.rb` program.  Click '''Run'''.

Did your program start up?  Did it work?  Make sure you have your
hacker name in there and your program name.  Do you see how it
works?

== Lesson 7B: Building on My Marks ==

Okay, time to steal some more code from me.  And this is fine.  It's
great to steal from other hackers, it's the very quintessential part
of learning at first.  You've got to build on other folk's stuff:
save yourself some work.

So, head over to my Hackety Hack site and click on my program
'''QuickyMark.rb'''.  Import it into Hackety Hack, it should appear
under your Shared Programs.

== Lesson 7B: What Do You Think of My QuickyMarks?? ==

'''Run''' the program.  It's a simple bookmark keeper.  Type in a link
(such as `http://why.hacketyhack.net`) and a description (such as
`Where I got QuickyMark.`)  When you're done playing with it, close
it by clicking the "X" on the popup.

Now, click on the '''QuickyMark''' program and check out the code.  A
couple popups in there.  And it's saving to a table called
'''QuickyMark'''.

== Lesson 7B: Sharing the QuickyMark Table ==

Slight detour here.  We're going to publish the QuickyMark table to
your Hackety Hack site.  Place the mouse over the QuickMark table's
icon and select '''Share this'''.

When it finishes sharing, click the little house icon in Hackety
Hack's toolbar.  The '''QuickyMark''' table should have a different icon
now: a table with a chain link.  The link means the table is linked
to your Hackety Hack site.

== Lesson 7B: Shared Where?? Linked Where?? ==

So: Visit your Hackety Hack site and click on '''QuickyMark''' under
Shared Tables.  Looks like your bookmarks copied over.

'''Okay, HERE'S THE DEAL: Now, whatever you save to the QuickyMark
table (which is now shared,) will be saved online.'''

At this point, you should try adding more bookmarks and checking to
see if they show up on the shared table on your Hackety Hack site.

== Lesson 7C: Colors and Designs ==

Let's try to spruce up this QuickyMark program.  It's that stupid
plain white and that just saps the life out of me.

Here's how: you can use the `design` command inside any popup to
change its look. Add your own `design` touch to the popup for 
the `bookmark_list` method. Plop this under the line that says `Web.popup do`:

{{{
#!ruby
design("font-size" => "15px", "font-family" => "arial",
  "color" => "white",
  "background-color" => "green",
  "padding" => "16px")
}}}

== Lesson 7C: QuickyMark's New Coat ==

Run the '''QuickyMark''' program.  See how that worked?

Ewww, but the links are so ugly.  How do we make them white??
Try attaching a "design" with a dot:

{{{
#!ruby
a(mark[:Link], :href => mark[:Link]).design("color" => "white")
}}}

So, what kinds of things can the design change?  Well, anything
that's a CSS property.  A complete list of CSS properties is
[[http://www.w3schools.com/css/css_reference.asp here]].

'''EXTRA CREDIT:'''  Hackety Hack comes with an `ask_color()` method which
pops up a color picker.  Try writing a short program which will ask
for a color and then build a popup using that color as the
background.

== Lesson 7D: Reaching Into Tables on Your Own ==

We've been using popups a lot to fill up tables, but there's a lot
going on there that you're not seeing.  Such as the `save` method.

If you'd ever like to add to your tables without going through a
popup, you can just write code that uses Table.save.  Here, let's
add a bookmark to your shared '''QuickyMark''' table:

{{{
 #!ruby
 Table('QuickyMark').save('Link' => "http://google.com/",
   'Description' => "Google, in case I forget...")
}}}

== Lesson 7D: A Good Reason ==

This is handy in case I want to, let's say, copy all my bookmarks
from del.icio.us to QuickyMark.  Or I could tie it into my chat
application: when someone puts a link in chat, I could save it into
'''QuickyMark'''.

'''EXTRA CREDIT:''' Can you load the Boing Boing feed and then save all
the items to your '''QuickyMark''' table in just four lines of code?
(Spoiler on the next page.)

== Lesson 7D: How I Saved All My Del.icio.us ==

Rather than saving all of Boing Boing's links, I'm going to grab
the latest stuff from my del.icio.us links.

{{{
#!ruby
# Boing Boing -> QuickyMark
feed = Web.fetch('http://del.icio.us/why', :as => Web::Feed)
feed.items.each do |item|
  Table('QuickyMark').save('Link' => item.link, 'Description' => item.title)
end
}}}

= Game Over, Roll Credits =

You did so AWESOME!!

This last lesson covered:

 * Sharing your own programs.
 * Importing other hacker's programs.
 * You hacked QuickyMark by using `design` to change colors.
 * Tables have a `save` method, so you can put stuff in your
   table without needing to go through a popup.
 * We imported links from a feed into a table.

So, where to now?  Well, you might try [[http://talkety.hacketyhack.net Talkety Talk]],
the online forum for Hackety Hack to meet some other hackers.  Or [[http://central.hacketyhack.net/ the Shared Programs]]
area, where crafty and popular programs are featured.

Or just try experimenting.  You've got help pages.  And you know where the
cheat sheet is.  Hack away.
